import base64, json

def get_headers():
    headers = {
        'Accept': '*/*',
        'Accept-Language': 'en-US,en;q=0.9,ms;q=0.8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Content-Type': 'text/plain;charset=UTF-8',
        'DNT': '1',
        'Origin': 'https://play.telia.lt',
        'Pragma': 'no-cache',
        'Referer': 'https://play.telia.lt/',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-site',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',
        'sec-ch-ua': '"Chromium";v="128", "Not;A=Brand";v="24", "Google Chrome";v="128"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
    }
    return headers

def get_data():
    data = 'eyJMYXRlbnNSZWdpc3RyYXRpb24iOnsiRnJpZW5kbHlOYW1lIjoidGVsaWEtdHYtY2xpZW50IiwiQ3VzdG9tZXJOYW1lIjoiVGVsaWEgVFYgUFJPRCIsIkFjY291bnROYW1lIjoiNzM3NDk1IiwiUG9ydGFsSWQiOiJmOTRmYTc5MS0wMTZmLTQwMjItOTY0My0yNmQzZWE2Y2FjMTkiLCJEZXZpY2VJbmZvIjp7IkZvcm1hdFZlcnNpb24iOiIxIiwiRGV2aWNlVHlwZSI6IlBDIiwiRFJNUHJvdmlkZXIiOiJHb29nbGUiLCJEUk1UeXBlIjoiV2lkZXZpbmUiLCJEUk1WZXJzaW9uIjoiMCIsIk9TVHlwZSI6IldpbjMyIiwiRGV2aWNlVmVuZG9yIjoiR29vZ2xlIEluYy4iLCJEZXZpY2VNb2RlbCI6IiJ9fSwiUGF5bG9hZCI6IkNBRVMzdzRLM0EwSUFSS0JDZ3JCQWdnQ0VpQlZoRzhiQmJNZnhhWkwxbWpFVHQwMDRiZjhJTVA0eXBMcis2XC93UUx5OE94aU13XC95MlxuQmlLT0FqQ0NBUW9DZ2dFQkFNeGdBSW0wemEwSXg1TkxuN1c0NjZPUThwOHVERGZvbEpRbVV5RWhtSXFLOXdGZWhnNjNRMElweFdka1xuUWpZYTE2b0JzczhzVTQzanFrUkl6N3owNEtkcG14a1lhSEJCbDJmdHpicFo0aW4zZUNMY2d1S3dFY21WQXRCcUpUa3pKU1NQU0NYQlxuV3FUZFN3R1VEN2dhYXZWMW53QzdKeHcxQ1lWcWhOUnBGR3hzYkdhbWxoQTBBVDMzbVRIMlwvK0dzdXlodENDTlg1dWhQelA3aE51ZDlcbmdEM3hBdlFIdVZUK2l0eXI3ekFVOHFoWXFHWERod09vQ2xFSmswMUhzQXJ4QjE2MTlHR2tZczM2Z3VDZ3RRZUF5TmcxZ0dhcTMxdlRcbkplM3NHYXhIWDk3MGFSVHFFSjZrbnB4UlJ3TlM4dlBaVWJUNXZvVmVkNEw4RGhyV2FqblVjbmNDQXdFQUFTaVwvc0FGSUFSS0FBcWZYXG5wWXBPbVdPbEY0N0Vja3AwU0pPdmprZzIra1hcL0dyVGw3SGU5OXcwYVZIY2dJcFdVK25qaFliTTVyT0dCOWZoYW4wSG1uV2Jib2pmT1xuZVZ0K3hwS2hzWW55d3JhamhNWnM4dHY1V3ljTHhyNUlrVTVwMCt0SlBHT1wvb3FIYmlWRGVZUld5SVRRMlFuTEZ4bUo3WUVacjhMWWhcbnJidENvMXQ2NHNPczVCR1dha2owSDkzVitRXC9WVXBWNVBMRWxOOGkrVDlSSXZSRjhVM2ttbU5EbDVseVFZU2hWSGdrTUNERjZtNTRXXG5xSzRYeHAyUVptWEZJeVZVN01rTzhTZVpPVEdPRUhXVW95OENDblJjZW1RUklvY0FjMnBTZFpiUG5VNDBBTDFzcXY3amlERTZFTDFLXG53dUxncWVTRXdlT2ZlT01NVXZPWEphWlI4UFwvekM2SGJZdFVhdHdVS3NRSUlBUklRNG5zVytKbW9xS0Q1d3YzV3U5UE1PeGluNU8yRVxuQmlLT0FqQ0NBUW9DZ2dFQkFPKzBGXC9VeXlSUlhuS0xaUzJzaGhvNkZqWFdFd2VUeFJcL1JqS1FUKzlwZHlUaENLOWJiTVwvUTNjeFhhQ1xuTDZZaHc4eThlMU42MzBjc1ZLRmpcLzdoT1wvb0Q2N0pEN1c1QUdoV3kxQXZpYSs4S1NGVm95NFBXZXJFMWVzM25pNkUxK3V0a1JtV1hkXG5VOHY4Q1NIcVwvQjFvZzZDRFZKZHVkNHBLK0dxZjJLdkViV21cL1RudTV3UysxOXgrQ3JrQ1hHaW1aVGlNbDRaanllTEZqSElvV1F6WTVcbmdFNm5iV1wvVzFnelNqK002a1d4SUZaa3NOZXNQVTZHbnJWTnRmaFhSZFZTVUVHRDFcL3pSVGllUDczVGdOaWcxUjI2MEMwdlJGNEZWa1xuK09KaFhtWkVGNE9GcmJBT3J1XC9wbHdtVkVMN0luSFB2WjFIRFRlMlYxNjhWVWphTmtJeFY5c3NDQXdFQUFTaVwvc0FGSUFSS0FBeDROXG5DS0NaSjE5dktCdjBBYXNPd2YrYzc4VU91TmZiZ3pWazVJUGRqZW1qMlo5ZTVvMjlsajNNeVwvbHVLcldoZHBDTm43TE9YamVjK1FwNlxucThrUjdQeHVUeUZIVHZYT1BpbnFHdFQ0XC92OHd0XC9nV3BXdFwvYXJIeFZNXC9vbjB5MG5HOExzbXl3MWF3R1NWQXBDTWxRTWswSU9wSkRcbmtJOG5OSWZJemt6YTFxbHdyaGFRQUpSZWtDN3pPXC83YThyZ3NEZDFWYktCSkFIQk5RMURxdGtcL0JnY0RLQ1wvaExna3Q3NmJMRmFnNnpcblwvRzBtekd2a0ZYNE05RzNkbmtHMEVNQ0Vnblhja1JmQkdHS05vWW1CWDhJSUdaZVVGWW8zTTltZFFhQ2l5emM1K0NGU3J4Rmg2dVJ3XG5zNjA4QjVOVEFKb2NPWGJZMFVMNG52b2hFYTdKVlBZdDRHUW5kd2xZOU5ESkpDK1hRSDNhVDA2Zmh0bkZxNHNSeWdnT1ZHN25rXC9EU1xuTmxFVjErRGNJd0FcL2NkekpidEpibzVGOWZlQjJMZFBuaEtFTmZTeklFRjFscm0xYmdBRnNYOTlwbDYyNFQ4M0NFNk9kWUROb1FQb0NcbmtDOU5zc1BGZVJ2aVFSUFBGN2pFVHFrU2JpS3lKR09EUTJKUitwSDdyZlNTdFc0Zzl3RHVNQm92Q2hCaGNIQnNhV05oZEdsdmJsOXVcbllXMWxFaHRqYjIwdWRHVnNhV0ZqYjIxd1lXNTVMbXgwTG5SbGJHbGhkSFlhRmdvTVkyOXRjR0Z1ZVY5dVlXMWxFZ1pIYjI5bmJHVWFcbkhBb0tiVzlrWld4ZmJtRnRaUklPYzJSclgyZHdhRzl1WlY5NE9EWWFHQW9SWVhKamFHbDBaV04wZFhKbFgyNWhiV1VTQTNnNE5ob2VcbkNndGtaWFpwWTJWZmJtRnRaUklQWjJWdVpYSnBZMTk0T0RaZllYSnRHaDRLREhCeWIyUjFZM1JmYm1GdFpSSU9jMlJyWDJkd2FHOXVcblpWOTRPRFlhWlFvS1luVnBiR1JmYVc1bWJ4SlhaMjl2WjJ4bEwzTmthMTluY0dodmJtVmZlRGcyTDJkbGJtVnlhV05mZURnMlgyRnlcbmJUb3hNUzlTVTFJeExqSXhNRGN5TWk0d01UTXVRVEl2TVRBd05qYzVNRFE2ZFhObGNtUmxZblZuTDJSbGRpMXJaWGx6R2g0S0ZIZHBcblpHVjJhVzVsWDJOa2JWOTJaWEp6YVc5dUVnWXhOaTR3TGpBYUpBb2ZiMlZ0WDJOeWVYQjBiMTl6WldOMWNtbDBlVjl3WVhSamFGOXNcblpYWmxiQklCTUJwUUNoeHZaVzFmWTNKNWNIUnZYMkoxYVd4a1gybHVabTl5YldGMGFXOXVFakJQUlUxRGNubHdkRzhnVEdWMlpXd3pcbklFTnZaR1VnTWpJMU9URWdUV0Y1SURFeUlESXdNakVnTWpNNk16YzZORE15RkFnQkVBRWdBQ2dQTUFCQUFFZ0FVQUZZQUdBQkVtNEtcbmJBcEdFaEJzSkJKKzhHWFkwR290NGFQUXVOODBHZ1pCZUdsdWIyMGlKRFpqTWpReE1qZGxMV1l3TmpVdFpEaGtNQzAyWVRKa0xXVXhcbllUTmtNR0k0WkdZek5FamozSldiQmhBQkdpQTFOemt6TjBJNE0wUTRNa05EUTBZeE0wUXdNREF3TURBd01EQXdNREF3TUJnQklLXC9NXG5cL0xZR01CVTRuTldYM3drYWdBS2dyTzlpZW9DM3hPRUNpazhHTXQrR3FGVGljRTdHMjhPWDNVTUVkNHVmSjRSNHArdU9SQ2hiWnJjTVxudG1sK2o0NmZ4ckRoVG96VVVLRkR2Vk1EOGpoMXVIVVVQWG5jazNtOStwTFBIMGc3NFRMY3hRTFlBSFNZOXpvVVJJK1Y3d1wvWlBJaWZcbmVrUUhyQmRoSk8xSTc1OXExQWthN2lUZGN5ejRUMFFWdG1HZWQ5QVEycVE1Q01EdGJBbzVXSjNSWXZRZEZwdTR6TlZmSjFnRlZiYVlcbmZlNWFud0ozMkxVMHNBeWo2azBJXC90N0NXSjFrd1A4SlRFbndZbmNsUUxXVFBWMTQ1b2dGR1ZYU053UnB2ZE1XSnJ3VWI5K085VUQxXG5rTmRUOEsySXlDTXVsOTR3SFYyQmhUSDVhSGFcL0FVNGdFUkJxV0crVmxidG05dEJ1ck55T0JQUkNcbiJ9'
    decoded_data = base64.b64decode(data).decode('utf-8')
    json_data = json.loads(decoded_data)
    return json_data